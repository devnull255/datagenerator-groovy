/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Groovy project to get you started.
 * For more details take a look at the Groovy Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.4/userguide/tutorial_groovy_projects.html
 */
import java.lang.management.ManagementFactory

plugins {
    // Apply the groovy plugin to add support for Groovy
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application
    id 'application'

    // RPM support
    id 'nebula.ospackage' version "8.0.3"
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    implementation  "com.netflix.nebula:gradle-ospackage-plugin:8.0.3"

    // Use the latest Groovy version for building this library
    implementation 'org.codehaus.groovy:groovy-all:2.5.7'

    // Use the awesome Spock testing and specification framework
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
}


def String sh(String command) {
    ProcessBuilder pb = new ProcessBuilder()
    List<String> cmdArgs = command.tokenize()
    pb.command(cmdArgs)
    //println cmdArgs.toString()
    //pb.inheritIO()
    pb.redirectInput(new File("/dev/ttys000"))
    pb.redirectOutput(new File("/dev/ttys000"))
    Process process = pb.start()
    def rc = process.waitFor()
    println "command $command exited with rc: $rc"
    //println process
} 

test {
    testLogging {
       events "passed", "skipped", "failed"
       showStandardStreams = true
    }
}

FileTree groovySources = fileTree(dir: 'src/main')
FileTree groovyTests = fileTree(dir: 'src/test')
groovySources.include '**/*.groovy'
groovyTests.include '**/*.groovy'


task('listSources') {
   doLast {
       println "I'm Guppy!"
       println "buildDir is $buildDir"
       println "projectDir is $projectDir"
       groovySources.each {File file ->
            println file
       }
       groovyTests.each {File file ->
            println file
       }
   }
}

task('edit') {
    doLast {
       def found = false
       def fileToEdit = ""
       groovySources.each {File file -> 
            if (file.toString().contains(sourceFile)) {
                found = true
                fileToEdit = file.toString()
            }
       }
       if (found) {
          sh "vi $fileToEdit"      
       } else {
          println "$sourceFile does not exist"
       }     
    }
}


def getPName() {
     ManagementFactory.getRuntimeMXBean().getName() 
}


task('pid') {
    doLast {
       println getPName().split('@')[0]
       print "press enter to continue ->"
       System.in.newReader().readLine() 
    }
}

distTar.compression = Compression.GZIP

ospackage {
    os = LINUX
    into '/opt/datagenerator'
}


task ('DistRpm', type: Rpm) {
    version "$version"
    release "$project.release"
    dependsOn test
}

application {
    // Define the main class for the application
    mainClassName = 'datagenerator.Datagenerator'
}
